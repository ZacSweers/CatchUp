import kotlin.String

/**
 * Generated by [gradle-kotlin-dsl-libs](https://github.com/jmfayard/gradle-kotlin-dsl-libs)
 *
 * Run again
 *   `$ ./gradlew syncLibs`
 * to update this file */
object Libs {
    /**
     * [aapt2 website](https://developer.android.com/studio) */
    const val aapt2: String = "com.android.tools.build:aapt2:" + Versions.aapt2

    /**
     * [adapter-rxjava2 website](https://github.com/square/retrofit/) */
    const val adapter_rxjava2: String =
            "com.squareup.retrofit2:adapter-rxjava2:" + Versions.adapter_rxjava2

    /**
     * [annotation website](http://developer.android.com/tools/extras/support-library.html) */
    const val androidx_annotation_annotation: String =
            "androidx.annotation:annotation:" + Versions.androidx_annotation_annotation

    /**
     * [core website](http://developer.android.com/tools/extras/support-library.html) */
    const val androidx_core_core: String = "androidx.core:core:" + Versions.androidx_core_core

    /**
     * [annotations website](https://github.com/bumptech/glide) */
    const val annotations: String = "com.github.bumptech.glide:annotations:" + Versions.annotations

    /**
     * [apollo-android-support website](https://github.com/apollographql/apollo-android/) */
    const val apollo_android_support: String =
            "com.apollographql.apollo:apollo-android-support:" + Versions.apollo_android_support

    /**
     * [apollo-gradle-plugin website](https://github.com/apollographql/apollo-android/) */
    const val apollo_gradle_plugin: String =
            "com.apollographql.apollo:apollo-gradle-plugin:" + Versions.apollo_gradle_plugin

    /**
     * [apollo-http-cache website](https://github.com/apollographql/apollo-android/) */
    const val apollo_http_cache: String =
            "com.apollographql.apollo:apollo-http-cache:" + Versions.apollo_http_cache

    /**
     * [apollo-runtime website](https://github.com/apollographql/apollo-android/) */
    const val apollo_runtime: String =
            "com.apollographql.apollo:apollo-runtime:" + Versions.apollo_runtime

    /**
     * [apollo-rx2-support website](https://github.com/apollographql/apollo-android/) */
    const val apollo_rx2_support: String =
            "com.apollographql.apollo:apollo-rx2-support:" + Versions.apollo_rx2_support

    /**
     * [appcompat website](http://developer.android.com/tools/extras/support-library.html) */
    const val appcompat: String = "androidx.appcompat:appcompat:" + Versions.appcompat

    /**
     * [auto-common website](https://github.com/google/auto) */
    const val auto_common: String = "com.google.auto:auto-common:" + Versions.auto_common

    /**
     * [auto-service website](https://github.com/google/auto) */
    const val auto_service: String = "com.google.auto.service:auto-service:" + Versions.auto_service

    /**
     * [autodispose website](https://github.com/uber/AutoDispose/) */
    const val autodispose: String = "com.uber.autodispose:autodispose:" + Versions.autodispose

    /**
     * [autodispose-android website](https://github.com/uber/AutoDispose/) */
    const val autodispose_android: String =
            "com.uber.autodispose:autodispose-android:" + Versions.autodispose_android

    /**
     * [autodispose-android-archcomponents website](https://github.com/uber/AutoDispose/) */
    const val autodispose_android_archcomponents: String =
            "com.uber.autodispose:autodispose-android-archcomponents:" + Versions.autodispose_android_archcomponents

    /**
     * [autodispose-android-archcomponents-ktx website](https://github.com/uber/AutoDispose/) */
    const val autodispose_android_archcomponents_ktx: String =
            "com.uber.autodispose:autodispose-android-archcomponents-ktx:" + Versions.autodispose_android_archcomponents_ktx

    /**
     * [autodispose-android-ktx website](https://github.com/uber/AutoDispose/) */
    const val autodispose_android_ktx: String =
            "com.uber.autodispose:autodispose-android-ktx:" + Versions.autodispose_android_ktx

    /**
     * [autodispose-ktx website](https://github.com/uber/AutoDispose/) */
    const val autodispose_ktx: String =
            "com.uber.autodispose:autodispose-ktx:" + Versions.autodispose_ktx

    /**
     * [autodispose-lifecycle website](https://github.com/uber/AutoDispose/) */
    const val autodispose_lifecycle: String =
            "com.uber.autodispose:autodispose-lifecycle:" + Versions.autodispose_lifecycle

    /**
     * [autodispose-lifecycle-ktx website](https://github.com/uber/AutoDispose/) */
    const val autodispose_lifecycle_ktx: String =
            "com.uber.autodispose:autodispose-lifecycle-ktx:" + Versions.autodispose_lifecycle_ktx

    /**
     * [browser website](http://developer.android.com/tools/extras/support-library.html) */
    const val browser: String = "androidx.browser:browser:" + Versions.browser

    /**
     * [bugsnag-android website](https://bugsnag.com) */
    const val bugsnag_android: String = "com.bugsnag:bugsnag-android:" + Versions.bugsnag_android

    const val bugsnag_android_gradle_plugin: String =
            "com.bugsnag:bugsnag-android-gradle-plugin:" + Versions.bugsnag_android_gradle_plugin

    /**
     * [gradle website](https://developer.android.com/studio) */
    const val com_android_tools_build_gradle: String =
            "com.android.tools.build:gradle:" + Versions.com_android_tools_build_gradle

    /**
     * [compiler website](https://github.com/bumptech/glide) */
    const val com_github_bumptech_glide_compiler: String =
            "com.github.bumptech.glide:compiler:" + Versions.com_github_bumptech_glide_compiler

    const val com_gradle_build_scan_gradle_plugin: String =
            "com.gradle.build-scan:com.gradle.build-scan.gradle.plugin:" + Versions.com_gradle_build_scan_gradle_plugin

    /**
     * [annotation website](https://github.com/Tickaroo/tikxml) */
    const val com_tickaroo_tikxml_annotation: String =
            "com.tickaroo.tikxml:annotation:" + Versions.com_tickaroo_tikxml_annotation

    /**
     * [core website](https://github.com/Tickaroo/tikxml) */
    const val com_tickaroo_tikxml_core: String =
            "com.tickaroo.tikxml:core:" + Versions.com_tickaroo_tikxml_core

    /**
     * [constraintlayout website](http://tools.android.com) */
    const val constraintlayout: String =
            "androidx.constraintlayout:constraintlayout:" + Versions.constraintlayout

    /**
     * [converter-htmlescape website](https://github.com/Tickaroo/tikxml) */
    const val converter_htmlescape: String =
            "com.tickaroo.tikxml:converter-htmlescape:" + Versions.converter_htmlescape

    /**
     * [converter-moshi website](https://github.com/square/retrofit/) */
    const val converter_moshi: String =
            "com.squareup.retrofit2:converter-moshi:" + Versions.converter_moshi

    /**
     * [core-ktx website](http://developer.android.com/tools/extras/support-library.html) */
    const val core_ktx: String = "androidx.core:core-ktx:" + Versions.core_ktx

    /**
     * [crumb-annotations website](https://github.com/uber/crumb/) */
    const val crumb_annotations: String =
            "com.uber.crumb:crumb-annotations:" + Versions.crumb_annotations

    /**
     * [crumb-compiler website](https://github.com/uber/crumb/) */
    const val crumb_compiler: String = "com.uber.crumb:crumb-compiler:" + Versions.crumb_compiler

    /**
     * [crumb-compiler-api website](https://github.com/uber/crumb/) */
    const val crumb_compiler_api: String =
            "com.uber.crumb:crumb-compiler-api:" + Versions.crumb_compiler_api

    /**
     * [dagger website](https://github.com/google/dagger) */
    const val dagger: String = "com.google.dagger:dagger:" + Versions.dagger

    /**
     * [dagger-android website](https://github.com/google/dagger) */
    const val dagger_android: String = "com.google.dagger:dagger-android:" + Versions.dagger_android

    /**
     * [dagger-android-processor website](https://github.com/google/dagger) */
    const val dagger_android_processor: String =
            "com.google.dagger:dagger-android-processor:" + Versions.dagger_android_processor

    /**
     * [dagger-android-support website](https://github.com/google/dagger) */
    const val dagger_android_support: String =
            "com.google.dagger:dagger-android-support:" + Versions.dagger_android_support

    /**
     * [dagger-compiler website](https://github.com/google/dagger) */
    const val dagger_compiler: String =
            "com.google.dagger:dagger-compiler:" + Versions.dagger_compiler

    /**
     * [dagger-spi website](https://github.com/google/dagger) */
    const val dagger_spi: String = "com.google.dagger:dagger-spi:" + Versions.dagger_spi

    /**
     * [drawerlayout website](http://developer.android.com/tools/extras/support-library.html) */
    const val drawerlayout: String = "androidx.drawerlayout:drawerlayout:" + Versions.drawerlayout

    /**
     * [emoji website](http://developer.android.com/tools/extras/support-library.html) */
    const val emoji: String = "androidx.emoji:emoji:" + Versions.emoji

    /**
     * [emoji-appcompat website](http://developer.android.com/tools/extras/support-library.html) */
    const val emoji_appcompat: String = "androidx.emoji:emoji-appcompat:" + Versions.emoji_appcompat

    const val error_prone_annotations: String =
            "com.google.errorprone:error_prone_annotations:" + Versions.error_prone_annotations

    const val firebase_config: String =
            "com.google.firebase:firebase-config:" + Versions.firebase_config

    const val firebase_core: String = "com.google.firebase:firebase-core:" + Versions.firebase_core

    const val firebase_database: String =
            "com.google.firebase:firebase-database:" + Versions.firebase_database

    const val firebase_perf: String = "com.google.firebase:firebase-perf:" + Versions.firebase_perf

    const val firebase_plugins: String =
            "com.google.firebase:firebase-plugins:" + Versions.firebase_plugins

    /**
     * [flick website](https://github.com/saket/flick) */
    const val flick: String = "me.saket:flick:" + Versions.flick

    /**
     * [flipper website](https://github.com/facebook/flipper) */
    const val flipper: String = "com.facebook.flipper:flipper:" + Versions.flipper

    /**
     * [fragment website](http://developer.android.com/tools/extras/support-library.html) */
    const val fragment: String = "androidx.fragment:fragment:" + Versions.fragment

    /**
     * [fragment-ktx website](http://developer.android.com/tools/extras/support-library.html) */
    const val fragment_ktx: String = "androidx.fragment:fragment-ktx:" + Versions.fragment_ktx

    /**
     * [gesture-views website](https://github.com/alexvasilkov/GestureViews) */
    const val gesture_views: String = "com.alexvasilkov:gesture-views:" + Versions.gesture_views

    /**
     * [glide website](https://github.com/bumptech/glide) */
    const val glide: String = "com.github.bumptech.glide:glide:" + Versions.glide

    /**
     * [inboxrecyclerview website](https://github.com/saket/InboxRecyclerView) */
    const val inboxrecyclerview: String = "me.saket:inboxrecyclerview:" + Versions.inboxrecyclerview

    /**
     * [inspector website](https://github.com/hzsweers/inspector/) */
    const val inspector: String = "io.sweers.inspector:inspector:" + Versions.inspector

    /**
     * [inspector-android-compiler-extension website](https://github.com/hzsweers/inspector/) */
    const val inspector_android_compiler_extension: String =
            "io.sweers.inspector:inspector-android-compiler-extension:" + Versions.inspector_android_compiler_extension

    /**
     * [inspector-autovalue-compiler-extension website](https://github.com/hzsweers/inspector/) */
    const val inspector_autovalue_compiler_extension: String =
            "io.sweers.inspector:inspector-autovalue-compiler-extension:" + Versions.inspector_autovalue_compiler_extension

    /**
     * [inspector-compiler website](https://github.com/hzsweers/inspector/) */
    const val inspector_compiler: String =
            "io.sweers.inspector:inspector-compiler:" + Versions.inspector_compiler

    /**
     * [inspector-factory-compiler website](https://github.com/hzsweers/inspector/) */
    const val inspector_factory_compiler: String =
            "io.sweers.inspector:inspector-factory-compiler:" + Versions.inspector_factory_compiler

    /**
     * [inspector-factory-compiler-annotations website](https://github.com/hzsweers/inspector/) */
    const val inspector_factory_compiler_annotations: String =
            "io.sweers.inspector:inspector-factory-compiler-annotations:" + Versions.inspector_factory_compiler_annotations

    /**
     * [inspector-nullability-compiler-extension website](https://github.com/hzsweers/inspector/) */
    const val inspector_nullability_compiler_extension: String =
            "io.sweers.inspector:inspector-nullability-compiler-extension:" + Versions.inspector_nullability_compiler_extension

    /**
     * [javapoet website](http://github.com/square/javapoet/) */
    const val javapoet: String = "com.squareup:javapoet:" + Versions.javapoet

    /**
     * [javax.annotation website](http://glassfish.org/) */
    const val javax_annotation: String =
            "org.glassfish:javax.annotation:" + Versions.javax_annotation

    const val jmfayard_github_io_gradle_kotlin_dsl_libs_gradle_plugin: String =
            "jmfayard.github.io.gradle-kotlin-dsl-libs:jmfayard.github.io.gradle-kotlin-dsl-libs.gradle.plugin:" + Versions.jmfayard_github_io_gradle_kotlin_dsl_libs_gradle_plugin

    /**
     * [jsoup website](https://jsoup.org/) */
    const val jsoup: String = "org.jsoup:jsoup:" + Versions.jsoup

    /**
     * [jsr305 website](http://findbugs.sourceforge.net/) */
    const val jsr305: String = "com.google.code.findbugs:jsr305:" + Versions.jsr305

    /**
     * [junit website](http://junit.org) */
    const val junit: String = "junit:junit:" + Versions.junit

    /**
     * [kotlin-annotation-processing-gradle website](https://kotlinlang.org/) */
    const val kotlin_annotation_processing_gradle: String =
            "org.jetbrains.kotlin:kotlin-annotation-processing-gradle:" + Versions.kotlin_annotation_processing_gradle

    /**
     * [kotlin-gradle-plugin website](https://kotlinlang.org/) */
    const val kotlin_gradle_plugin: String =
            "org.jetbrains.kotlin:kotlin-gradle-plugin:" + Versions.kotlin_gradle_plugin

    /**
     * [kotlin-metadata website](https://github.com/Takhion/kotlin-metadata) */
    const val kotlin_metadata: String =
            "me.eugeniomarletti.kotlin.metadata:kotlin-metadata:" + Versions.kotlin_metadata

    /**
     * [kotlin-noarg website](https://kotlinlang.org/) */
    const val kotlin_noarg: String = "org.jetbrains.kotlin:kotlin-noarg:" + Versions.kotlin_noarg

    /**
     * [kotlin-scripting-compiler-embeddable website](https://kotlinlang.org/) */
    const val kotlin_scripting_compiler_embeddable: String =
            "org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable:" + Versions.kotlin_scripting_compiler_embeddable

    /**
     * [kotlin-stdlib website](https://kotlinlang.org/) */
    const val kotlin_stdlib: String = "org.jetbrains.kotlin:kotlin-stdlib:" + Versions.kotlin_stdlib

    /**
     * [kotlin-stdlib-jdk7 website](https://kotlinlang.org/) */
    const val kotlin_stdlib_jdk7: String =
            "org.jetbrains.kotlin:kotlin-stdlib-jdk7:" + Versions.kotlin_stdlib_jdk7

    /**
     * [kotlin-stdlib-jdk8 website](https://kotlinlang.org/) */
    const val kotlin_stdlib_jdk8: String =
            "org.jetbrains.kotlin:kotlin-stdlib-jdk8:" + Versions.kotlin_stdlib_jdk8

    /**
     * [kotlinpoet website](http://github.com/square/kotlinpoet/) */
    const val kotlinpoet: String = "com.squareup:kotlinpoet:" + Versions.kotlinpoet

    /**
     * [lazythreetenbp website](https://github.com/gabrielittner/lazythreetenbp/) */
    const val lazythreetenbp: String =
            "com.gabrielittner.threetenbp:lazythreetenbp:" + Versions.lazythreetenbp

    /**
     * [leakcanary-android website](http://github.com/square/leakcanary/) */
    const val leakcanary_android: String =
            "com.squareup.leakcanary:leakcanary-android:" + Versions.leakcanary_android

    /**
     * [leakcanary-android-no-op website](http://github.com/square/leakcanary/) */
    const val leakcanary_android_no_op: String =
            "com.squareup.leakcanary:leakcanary-android-no-op:" + Versions.leakcanary_android_no_op

    /**
     * [library website](https://github.com/jgilfelt/chuck) */
    const val library: String = "com.readystatesoftware.chuck:library:" + Versions.library

    /**
     * [library-no-op website](https://github.com/jgilfelt/chuck) */
    const val library_no_op: String =
            "com.readystatesoftware.chuck:library-no-op:" + Versions.library_no_op

    /**
     * [lifecycle-compiler website](https://developer.android.com/topic/libraries/architecture/index.html) */
    const val lifecycle_compiler: String =
            "androidx.lifecycle:lifecycle-compiler:" + Versions.lifecycle_compiler

    /**
     * [lifecycle-extensions website](https://developer.android.com/topic/libraries/architecture/index.html) */
    const val lifecycle_extensions: String =
            "androidx.lifecycle:lifecycle-extensions:" + Versions.lifecycle_extensions

    /**
     * [lint-gradle website](https://developer.android.com/studio) */
    const val lint_gradle: String = "com.android.tools.lint:lint-gradle:" + Versions.lint_gradle

    /**
     * [logging-interceptor website](https://github.com/square/okhttp) */
    const val logging_interceptor: String =
            "com.squareup.okhttp3:logging-interceptor:" + Versions.logging_interceptor

    /**
     * [lottie website](https://github.com/airbnb/lottie-android) */
    const val lottie: String = "com.airbnb.android:lottie:" + Versions.lottie

    /**
     * [madge website](https://github.com/JakeWharton/madge/) */
    const val madge: String = "com.jakewharton.madge:madge:" + Versions.madge

    /**
     * [material website](http://developer.android.com/tools/extras/support-library.html) */
    const val material: String = "com.google.android.material:material:" + Versions.material

    /**
     * [moshi website](https://github.com/square/moshi) */
    const val moshi: String = "com.squareup.moshi:moshi:" + Versions.moshi

    /**
     * [moshi-kotlin-codegen website](https://github.com/square/moshi) */
    const val moshi_kotlin_codegen: String =
            "com.squareup.moshi:moshi-kotlin-codegen:" + Versions.moshi_kotlin_codegen

    /**
     * [moshi-lazy-adapters website](https://github.com/serj-lotutovici/moshi-lazy-adapters/) */
    const val moshi_lazy_adapters: String =
            "com.serjltt.moshi:moshi-lazy-adapters:" + Versions.moshi_lazy_adapters

    /**
     * [okhttp website](https://github.com/square/okhttp) */
    const val okhttp: String = "com.squareup.okhttp3:okhttp:" + Versions.okhttp

    /**
     * [okhttp3-integration website](https://github.com/bumptech/glide) */
    const val okhttp3_integration: String =
            "com.github.bumptech.glide:okhttp3-integration:" + Versions.okhttp3_integration

    /**
     * [okio website](https://github.com/square/okio/) */
    const val okio: String = "com.squareup.okio:okio:" + Versions.okio

    /**
     * [palette website](http://developer.android.com/tools/extras/support-library.html) */
    const val palette: String = "androidx.palette:palette:" + Versions.palette

    /**
     * [palette-ktx website](http://developer.android.com/tools/extras/support-library.html) */
    const val palette_ktx: String = "androidx.palette:palette-ktx:" + Versions.palette_ktx

    /**
     * [play-publisher website](https://github.com/Triple-T/gradle-play-publisher) */
    const val play_publisher: String =
            "com.github.triplet.gradle:play-publisher:" + Versions.play_publisher

    /**
     * [preference website](http://developer.android.com/tools/extras/support-library.html) */
    const val preference: String = "androidx.preference:preference:" + Versions.preference

    /**
     * [preference-ktx website](http://developer.android.com/tools/extras/support-library.html) */
    const val preference_ktx: String =
            "androidx.preference:preference-ktx:" + Versions.preference_ktx

    /**
     * [process-phoenix website](https://github.com/JakeWharton/ProcessPhoenix/) */
    const val process_phoenix: String =
            "com.jakewharton:process-phoenix:" + Versions.process_phoenix

    /**
     * [processor website](https://github.com/Tickaroo/tikxml) */
    const val processor: String = "com.tickaroo.tikxml:processor:" + Versions.processor

    const val psync: String = "io.sweers.psync:psync:" + Versions.psync

    const val recyclerview_animators: String =
            "jp.wasabeef:recyclerview-animators:" + Versions.recyclerview_animators

    /**
     * [recyclerview-integration website](https://github.com/bumptech/glide) */
    const val recyclerview_integration: String =
            "com.github.bumptech.glide:recyclerview-integration:" + Versions.recyclerview_integration

    /**
     * [retrofit website](https://github.com/square/retrofit/) */
    const val retrofit: String = "com.squareup.retrofit2:retrofit:" + Versions.retrofit

    /**
     * [retrofit-converter website](https://github.com/Tickaroo/tikxml) */
    const val retrofit_converter: String =
            "com.tickaroo.tikxml:retrofit-converter:" + Versions.retrofit_converter

    /**
     * [retrofit-mock website](https://github.com/square/retrofit/) */
    const val retrofit_mock: String =
            "com.squareup.retrofit2:retrofit-mock:" + Versions.retrofit_mock

    /**
     * [room-compiler website](https://developer.android.com/topic/libraries/architecture/index.html) */
    const val room_compiler: String = "androidx.room:room-compiler:" + Versions.room_compiler

    /**
     * [room-runtime website](https://developer.android.com/topic/libraries/architecture/index.html) */
    const val room_runtime: String = "androidx.room:room-runtime:" + Versions.room_runtime

    /**
     * [room-rxjava2 website](https://developer.android.com/topic/libraries/architecture/index.html) */
    const val room_rxjava2: String = "androidx.room:room-rxjava2:" + Versions.room_rxjava2

    /**
     * [rx-preferences website](https://github.com/f2prateek/rx-preferences) */
    const val rx_preferences: String =
            "com.f2prateek.rx.preferences2:rx-preferences:" + Versions.rx_preferences

    /**
     * [rxandroid website](https://github.com/ReactiveX/RxAndroid) */
    const val rxandroid: String = "io.reactivex.rxjava2:rxandroid:" + Versions.rxandroid

    /**
     * [rxbinding-design-kotlin website](https://github.com/JakeWharton/RxBinding/) */
    const val rxbinding_design_kotlin: String =
            "com.jakewharton.rxbinding2:rxbinding-design-kotlin:" + Versions.rxbinding_design_kotlin

    /**
     * [rxbinding-kotlin website](https://github.com/JakeWharton/RxBinding/) */
    const val rxbinding_kotlin: String =
            "com.jakewharton.rxbinding2:rxbinding-kotlin:" + Versions.rxbinding_kotlin

    /**
     * [rxbinding-support-v4-kotlin website](https://github.com/JakeWharton/RxBinding/) */
    const val rxbinding_support_v4_kotlin: String =
            "com.jakewharton.rxbinding2:rxbinding-support-v4-kotlin:" + Versions.rxbinding_support_v4_kotlin

    /**
     * [rxjava website](https://github.com/ReactiveX/RxJava) */
    const val rxjava: String = "io.reactivex.rxjava2:rxjava:" + Versions.rxjava

    const val rxrelay: String = "com.jakewharton.rxrelay2:rxrelay:" + Versions.rxrelay

    /**
     * [scalpel website](https://github.com/JakeWharton/scalpel/) */
    const val scalpel: String = "com.jakewharton.scalpel:scalpel:" + Versions.scalpel

    /**
     * [stetho website](https://github.com/facebook/stetho) */
    const val stetho: String = "com.facebook.stetho:stetho:" + Versions.stetho

    /**
     * [stetho-okhttp3 website](https://github.com/facebook/stetho) */
    const val stetho_okhttp3: String =
            "com.facebook.stetho:stetho-okhttp3:" + Versions.stetho_okhttp3

    /**
     * [stetho-timber website](https://github.com/facebook/stetho) */
    const val stetho_timber: String = "com.facebook.stetho:stetho-timber:" + Versions.stetho_timber

    /**
     * [support-annotations website](http://developer.android.com/tools/extras/support-library.html) */
    const val support_annotations: String =
            "com.android.support:support-annotations:" + Versions.support_annotations

    /**
     * [swiperefreshlayout website](http://developer.android.com/tools/extras/support-library.html) */
    const val swiperefreshlayout: String =
            "androidx.swiperefreshlayout:swiperefreshlayout:" + Versions.swiperefreshlayout

    /**
     * [taptargetview website](https://github.com/KeepSafe/TapTargetView) */
    const val taptargetview: String =
            "com.getkeepsafe.taptargetview:taptargetview:" + Versions.taptargetview

    /**
     * [telescope website](https://github.com/mattprecious/telescope/) */
    const val telescope: String = "com.mattprecious.telescope:telescope:" + Versions.telescope

    /**
     * [timber website](https://github.com/JakeWharton/timber) */
    const val timber: String = "com.jakewharton.timber:timber:" + Versions.timber

    /**
     * [truth website](http://github.com/google/truth) */
    const val truth: String = "com.google.truth:truth:" + Versions.truth

    /**
     * [unbescape website](http://www.unbescape.org) */
    const val unbescape: String = "org.unbescape:unbescape:" + Versions.unbescape

    /**
     * [viewpager website](http://developer.android.com/tools/extras/support-library.html) */
    const val viewpager: String = "androidx.viewpager:viewpager:" + Versions.viewpager
}
